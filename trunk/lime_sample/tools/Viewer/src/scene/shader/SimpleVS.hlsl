"static const float PI = 3.14159265358979323846;\n"
"static const float PI2 = 6.28318530717958647692;\n"
"static const float INV_PI = 0.31830988618379067153;\n"
"static const float INV_PI2 = 0.15915494309189533576;\n"
"static const int c_izero = 0;\n"
"static const int c_ione = 1;\n"
"static const int c_itwo = 2;\n"
"static const int c_ithree = 3;\n"
"static const float f_1_100 = 0.01;\n"
"uniform float4x4 mwvp; //World * View * Projection Matrix\n"
"// \n"
"#ifdef SKINNING\n"
"#define NUM_PALETTE_MATRICES 80\n"
"uniform float4x3 palette[NUM_PALETTE_MATRICES];\n"
"void skinning(uniform float4 position, uniform float3 normal, out float3 retPosition, out float3 retNormal, uniform float4 indices)\n"
"{\n"
"    float weight = indices.z * f_1_100;\n"
"    int index = int(indices.x);\n"
"    retPosition = mul(position, palette[index]) * weight;\n"
"    retNormal = mul(normal, palette[index]) * weight;\n"
"    weight = float(c_ione) - weight;\n"
"    index = int(indices.y);\n"
"    retPosition += mul(position, palette[index]) * weight;\n"
"    retNormal += mul(normal, palette[index]) * weight;\n"
"}\n"
"#endif\n"
"//--------------------------------\n"
"struct VSInput\n"
"{\n"
"    float4 position    : POSITION;\n"
"#ifdef VNORMAL\n"
"    float3 normal      : NORMAL;\n"
"#endif\n"
"#ifdef VTEX0\n"
"    float2 tex0   : TEXCOORD0;\n"
"#endif\n"
"#ifdef VTEX1\n"
"    float2 tex1   : TEXCOORD1;\n"
"#endif\n"
"#ifdef VBONE\n"
"    float4 bones       : BLENDINDICES;\n"
"#endif\n"
"};\n"
"struct VS_OUTPUT\n"
"{\n"
"    float4 position : POSITION0;\n"
"#ifdef PNORMAL\n"
"    float3 normal : TEXCOORD0;\n"
"#endif\n"
"#ifdef PCOLOR\n"
"    float4 color : COLOR0;\n"
"#endif\n"
"#ifdef PTEX0\n"
"    float4 tex0 : TEXCOORD1;\n"
"#endif\n"
"#ifdef PPOS\n"
"    float3 pos0 : TEXCOORD2;\n"
"#endif\n"
"#ifdef LIGHTVS\n"
"    float4 specular0 : TEXCOORD3;\n"
"#ifdef TEXSHADE\n"
"    float2 tex2 : TEXCOORD4;\n"
"#endif\n"
"#endif //LIGHTVS\n"
"};\n"
"VS_OUTPUT main(VSInput input)\n"
"{\n"
"    VS_OUTPUT output= (VS_OUTPUT)0;\n"
"    float3 position;\n"
"    float3 normal;\n"
"#ifdef SKINNING\n"
"    //position = input.position;\n"
"    //normal = input.normal;\n"
"    skinning(input.position, input.normal, position, normal, input.bones);\n"
"#else\n"
"    position = input.position.xyz;\n"
"#ifdef V_NORMAL\n"
"    normal = input.normal;\n"
"#endif\n"
"#endif\n"
"#ifdef PPOS\n"
"    output.pos0 = position;\n"
"#endif\n"
"#ifdef LIGHTVS\n"
"    float3 posLighting = position.xyz;\n"
"#endif\n"
"//linear-z or non-linear-z\n"
"#if 1\n"
"    float4 vpos = mul(float4(position.xyz, 1.0f), mwvp);\n"
"    vpos.z *= vpos.w;\n"
"    output.position = vpos;\n"
"#else\n"
"    output.position = mul(float4(position.xyz, 1.0f), mwvp);\n"
"#endif\n"
"#ifdef PNORMAL\n"
"    output.normal = normal;\n"
"#endif\n"
"#ifdef PTEX0\n"
"    output.tex0.xy = input.tex0;\n"
"#endif\n"
"#ifdef PTEX1\n"
"    output.tex0.zw = input.tex1;\n"
"#endif\n"
"///////////////////////////////////////////////////\n"
"#ifdef LIGHTVS\n"
"#ifdef VNORMAL\n"
"    float3 N = normalize(normal);\n"
"    float3 E = normalize(camPos - posLighting);\n"
"    float3 H = normalize(dlDir+E);\n"
"    float cosNH = max(c_fzero, dot(N,H));\n"
"#ifdef TEXSHADE\n"
"    output.tex2 = vec2( (c_fone + dot(N, dlDir))*c_fhalf );\n"
"#endif //TEXSHADE\n"
"    output.specular0.xyz = specular.xyz * pow(cosNH, specular.w);\n"
"    output.specular0.w = cosNH;\n"
"#else\n"
"    output.specular0.xyz = vec3(c_fzero);\n"
"    output.specular0.w = c_fone;\n"
"#endif\n"
"#endif //LIGHTVS\n"
"    return output;\n"
"}\n"
