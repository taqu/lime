"precision highp float;\n"
"precision mediump int;\n"
"#ifdef PNORMAL\n"
"varying vec3 v_normal;\n"
"#endif\n"
"#ifdef PCOLOR\n"
"varying  vec3 v_color0;\n"
"#endif\n"
"#ifdef PTEX0\n"
"varying vec2 v_tex0;\n"
"#endif\n"
"#ifdef PPOS\n"
"varying vec3 v_pos0;\n"
"#endif\n"
"const float PI = 3.14159265358979323846;\n"
"const float PI2 = 6.28318530717958647692;\n"
"const float INV_PI = 0.31830988618379067153;\n"
"const float INV_PI2 = 0.15915494309189533576;\n"
"#ifdef FRESNEL\n"
"const vec4 coeffFdr = vec4(-1.440, 0.710, 0.668, 0.0636);\n"
"uniform vec3 dlDir;\n"
"uniform vec3 camPos;\n"
"uniform vec4 specular;\n"
"#endif\n"
"uniform highp vec4 diffuse;\n"
"#if defined(PTEX0)\n"
"uniform sampler2D texAlbedo;\n"
"#endif\n"
"void main()\n"
"{\n"
"    //-------------\n"
"    highp vec4 color;\n"
"#if defined(PTEX0)\n"
"    color = texture2D(texAlbedo, v_tex0);\n"
"#else\n"
"    color = diffuse;\n"
"#endif\n"
"#if defined(FRESNEL)\n"
"    vec3 L = dlDir;\n"
"    vec3 N = normalize(v_normal);\n"
"    vec3 V = normalize(camPos - v_pos0);\n"
"    vec3 H = normalize(L+V);\n"
"    float cosNL = max(0.0, dot(N,L));\n"
"    float cosVH = max(0.0, dot(V,H));\n"
"    float cosNH = max(0.0, dot(N,H));\n"
"    float shininess = specular.w;\n"
"    vec3 ks = specular.xyz;\n"
"    vec3 reflectance = ks * (shininess + 2.0)*INV_PI2*pow(max(0.0001, cosNH), shininess);\n"
"    float ni = 1.5;\n"
"    //const float nt = 1.0;\n"
"    float F0 = (1.0 - ni)/(1.0 + ni);\n"
"    F0 = F0*F0;\n"
"    float Fr = F0 + (1.0 - F0)* pow(1.0 - cosNL, 5.0);\n"
"    reflectance *= Fr;\n"
"    vec3 Fdr = vec3(1.0, 1.0, 1.0) - reflectance;\n"
"    vec4 dcolor;\n"
"    dcolor.xyz = diffuse.xyz * Fdr * INV_PI;\n"
"    dcolor.w = diffuse.w;\n"
"    color *= dcolor;\n"
"    color.xyz += reflectance;\n"
"#else\n"
"#endif\n"
"#if defined(PCOLOR)\n"
"    color.xyz *= v_color0;\n"
"#endif\n"
"    gl_FragColor = color;\n"
"}\n"
