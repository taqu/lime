precision mediump float;
precision mediump int;

#ifdef PNORMAL
varying vec3 v_normal;
#endif

#ifdef PCOLOR
varying  vec4 v_color0;
#endif

#ifdef PTEX0
varying vec2 v_tex0;
#endif

#ifdef PPOS
varying vec3 v_pos0;
#endif

const float c_fzero = 0.0;
const float c_fone = 1.0;

const float PI = 3.14159265358979323846;
const float PI2 = 6.28318530717958647692;
const float INV_PI = 0.31830988618379067153;
const float INV_PI_2 = 0.63661977236758134306;

const float ALPHA_REF = 0.5;

#ifdef LIGHTVS
uniform vec3 ambient;
uniform vec4 dlColor;

uniform vec4 diffuse;
uniform vec3 emissive;

varying vec4 v_specular0;

#ifdef TEXSHADE
varying vec2 v_tex3;
#endif

#else //LIGHTVS

uniform vec3 dlDir;
uniform vec4 dlColor;
uniform vec3 camPos;

uniform vec4 diffuse;
uniform vec3 ambient;
uniform vec3 emissive;
#endif //LIGHTVS

#ifdef PNORMAL

uniform vec4 specular;

#endif

#if defined(PTEX0)
uniform sampler2D texAlbedo;
#endif


void main()
{
    //-------------
    vec4 color;

////////////////////
#ifdef TEXALBEDO
    color = texture2D(texAlbedo, v_tex0);
#else
    color = diffuse;
#endif

#ifdef PCOLOR
    color *= v_color0;
#endif

//////////////////
#ifdef ALPHATEST
    if(color.w<ALPHA_REF){
        discard;
    }
#endif

#ifdef LIGHTVS
    color.xyz = (color.xyz * v_specular0.w + v_specular0.xyz) * dlColor.xyz + ambient * color.xyz;

#elif defined(PNORMAL)
    vec3 L = dlDir;
    vec3 N = normalize(v_normal);
    vec3 E = normalize(camPos - v_pos0);
    vec3 H = normalize(L+E);

    float cosNH = max(c_fzero, dot(N,H));

    float shininess = specular.w;
    float rs = pow(cosNH, shininess);

    color.xyz = (color.xyz * cosNH + specular.xyz * rs) * dlColor.xyz + ambient * color.xyz;

#else
    color.xyz *= (dlColor.xyz + ambient);
#endif


#ifdef EMISSIVE
    color.xyz += emissive;
#endif

    gl_FragColor = color;
}
