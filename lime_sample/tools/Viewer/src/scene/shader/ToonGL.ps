precision mediump float;
precision mediump int;

#ifdef PNORMAL
varying vec3 v_normal;
#endif

#ifdef PCOLOR
varying  vec4 v_color0;
#endif

#ifdef PTEX0
varying vec2 v_tex0;
#endif

#ifdef PTEX1
varying vec2 v_tex1;
#endif

#ifdef PPOS
varying vec3 v_pos0;
#endif

const float c_fzero = 0.0;
const float c_fone = 1.0;
const float c_fhalf = 0.5;

const float ALPHA_REF = 0.5;
const float c_ffive = 5.0;

////////////////////////////////////
#ifdef LIGHTVS
uniform vec3 ambient;
uniform vec4 dlColor;

uniform vec4 diffuse;
uniform vec3 emissive;

varying vec4 v_specular0;

#ifdef TEXSHADE
varying vec4 v_tex3;
#endif

#else //LIGHTVS

uniform vec3 dlDir;
uniform vec4 dlColor;
uniform vec3 camPos;

uniform vec4 diffuse;
uniform vec3 ambient;
uniform vec3 emissive;

#endif //LIGHTVS

#if defined(TEXSHADE) || defined(PNORMAL)

uniform vec4 specular;

#endif

#ifdef PTEX0
uniform sampler2D texAlbedo;
uniform sampler2D texAlbedo2;
#endif

//////////////////////////
#ifdef SPHEREMAP
uniform sampler2D texSphere;
#endif

void main()
{
    //-------------
    vec4 color;

////////////////////
#ifdef TEXALBEDO
    color = texture2D(texAlbedo, v_tex0);
    color.xyz *= diffuse.w;
#else
    color = diffuse;
#endif

#ifdef PCOLOR
    color *= v_color0;
#endif

//////////////////
#ifdef ALPHATEST
    if(color.w<ALPHA_REF){
        discard;
    }
#endif

vec2 sample;

#ifdef LIGHTVS

#ifdef TEXSHADE
    vec3 power = texture2D(texAlbedo2, v_tex3.xy).xyz;
#else
    vec3 power = vec3(v_specular0.w);
#endif //TEXSHADE

#ifdef TEXALBEDO
    color.xyz = color.xyz * power * min(dlColor.xyz * diffuse.xyz + ambient, c_fone) + dlColor.xyz*v_specular0.xyz;
#else
    color.xyz = power * min(dlColor.xyz * diffuse.xyz + ambient, c_fone) + dlColor.xyz*v_specular0.xyz;
#endif

#elif defined(TEXSHADE)
    vec3 N = normalize(v_normal);
    vec3 L = dlDir;
    vec3 E = normalize(camPos - v_pos0);
    vec3 H = normalize(L+E); //half vector

    float cosNL = max(c_fzero, dot(N,L));
    float cosNH = max(c_fzero, dot(N,H));
    //float cosNE = max(c_fzero, dot(N,E));

    //sample.x = cosNE; //‚±‚¿‚ç‘¤‚ÍƒJƒbƒg
    sample.x = cosNL;
    sample.y = cosNL;

    vec3 c = texture2D(texAlbedo2, sample).xyz;

    float shininess = specular.w;

    float rs = pow(cosNH, shininess);

    color.xyz = (color.xyz * c + specular.xyz * rs) * dlColor.xyz + ambient * color.xyz;

    //color.xyz = color.xyz * c * dlColor.xyz + ambient * color.xyz; //omit specular

#elif defined(PNORMAL)
    vec3 N = normalize(v_normal);
    vec3 L = dlDir;
    vec3 E = normalize(camPos - v_pos0);
    vec3 H = normalize(L+E); //half vector

    float cosNH = max(c_fzero, dot(N,H));
    //float cosNE = max(c_fzero, dot(N,E));

    float shininess = specular.w;
    float rs = pow(cosNH, shininess);

    color.xyz = (color.xyz  + specular.xyz * rs) * dlColor.xyz + ambient * color.xyz;

#else
    color.xyz *= dlColor.xyz;
#endif

#ifdef SPHEREMAP

#if defined(LIGHTVS) && defined(TEXSHADE)
    sample = v_tex3.zw;
#else
    sample = v_normal.xy + vec2(c_fone, c_fone);
    sample *= c_fhalf;
#endif

#ifdef SPHEREMAPADD
    color.xyz += texture2D(texSphere, sample).xyz;
#else
    color.xyz *= texture2D(texSphere, sample).xyz;
#endif

#endif

#ifdef EMISSIVE
    color.xyz += emissive;
#endif

    gl_FragColor = color;
}
