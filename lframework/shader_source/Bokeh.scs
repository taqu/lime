#include "Common.scs"

cbuffer ConstantBuffer0 : register(b0)
{
    float2 sizeToUV;
    float blurThreshold;
    float lumThreshold;
}

Texture2D<float4> texColor : register(t0);
Texture2D<float2> texDepthBlur : register(t1);
SamplerState samPoint : register(s0);
SamplerState samLinear : register(s1);

AppendStructuredBuffer<BokehPoint> bokehPoints : register(u0);

#define NUM_SAMPLES (9)
static const float2 Samples[NUM_SAMPLES] =
{
float2(-1.5, -1.5),
float2( 0.5, -1.5),
float2( 1.5, -1.5),
float2(-1.5,  0.5),
float2( 0.5,  0.5),
float2( 1.5,  0.5),
float2(-1.5,  1.5),
float2( 0.5,  1.5),
float2( 1.5,  1.5)
};

[numthreads(NUMTHREADS, NUMTHREADS, 1)]
void main(uint3 threadID : SV_DispatchThreadID)
{
    float2 center = threadID.xy * sizeToUV;

    float2 centerDepthBlur = texDepthBlur.SampleLevel(samPoint, center, 0).xy;
    float centerDepth = centerDepthBlur.x;
    float centerBlur = centerDepthBlur.y;

    if(centerBlur<=blurThreshold){
        return;
    }

    float3 centerColor = texColor.SampleLevel(samPoint, center, 0).xyz;
    float3 sum = centerColor;
    float totalWeight = 1;

    float3 averageColor = 0;
    //[unroll]
    for(int i=0; i<NUM_SAMPLES; ++i){
        float2 sample = Samples[i] * sizeToUV + center;
        averageColor += texColor.SampleLevel(samLinear, sample, 0).xyz;
    }
    averageColor /= NUM_SAMPLES;
    float centerLum = RGBToLum(centerColor.xyz);
    float averageLum = RGBToLum(averageColor.xyz);
    float diffLum = max(averageLum - centerLum, 0);

    if(lumThreshold<=diffLum){
        center = float2(2,-2) * center + float2(-1,1);
        BokehPoint bokehPoint;
        bokehPoint.position_ = float3(center, centerDepth);
        bokehPoint.blur_ = centerBlur;
        bokehPoint.color_ = centerColor;
        bokehPoints.Append(bokehPoint);
    }
}
