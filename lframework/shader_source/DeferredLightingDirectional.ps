#include "Common.ps"

cbuffer GBufferConstant : register(b5)
{
    int2 gbuffSize;
    float2 gbuffInvSize;
}

cbuffer DLightConstant : register(b6)
{
    DirectionalLight dlights[MAX_DIRECTIONAL_LIGHTS];
}

Texture2D<float4> gbuffAlbedo : register(t0);
Texture2D<float4> gbuffDepthNormal : register(t1);
Texture2D<float4> gbuffSpecular : register(t2);

struct VSOutput
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
    uint id : SV_InstanceID;
};

float4 main(VSOutput input) : SV_TARGET0
{
    float2 uv = input.tex;
    uint2 location = uv*gbuffSize;

    float4 depthNormal = gbuffDepthNormal[location];
    float depth = decode16bit(depthNormal.xy);
    float3 N = decodeNormal(depthNormal.zw);

    float4 albedo = gbuffAlbedo[location];
    float4 specular = gbuffSpecular[location];

    Material material;
    material.albedo = albedo.rgb;
    material.specular = specular.rgb;
    material.roughness = specular.w;
    material.metalic = albedo.w;
    material.ambientOcclusion = 1;

    float3 screen;
    screen.xy = uv * float2(2.0,-2.0) + float2(-1.0,1.0);
    screen.z = depth;
    float3 worldPos = screenToWorld(screen, minvvp1);

    float3 V = normalize(cameraPos.xyz - worldPos);

    IncidentLight incidentLight;
    irradianceDirectionalLight(incidentLight, dlights[input.id]);

    float shadowAttenuation = calcShadowInfluence(texShadow, float4(worldPos,1), N, incidentLight.direction, mlvp);

    EnvironmentLight envLight;
    envLight.diffuse_ = irradianceDiffuse(texIrradiance, samLinear, N);
    envLight.specular_ = radianceSpecular(texRadiance, samLinear, N, V, material.roughness, specularMapMipLevels);

    float4 color;
    color.rgb = lightSurface(N, V, incidentLight, material, shadowAttenuation, envLight);
    //color.rgb = saturate(dot(N,incidentLight.direction));
    color.a = 1;
    return color;
}
