#include "Common.scs"

cbuffer ConstantBuffer0 : register(b0)
{
    int2 size;
    int filterSize;
    int reserved;
}


Texture2D<float2> texVelocity : register(t0);
RWTexture2D<float2> texOut : register(u0);

[numthreads(NUMTHREADS, NUMTHREADS, 1)]
void main(uint3 threadID : SV_DispatchThreadID)
{
    CHECKSIZE_RETURN(threadID, texOut);

    int2 origin = threadID.xy*filterSize;
    uint2 location = (uint2)0;
    float maxMagnitude = 0.0;
    float2 maxVelocity = (float2)0;
    for(int i=0; i<filterSize; ++i){
        location.y = origin.y + i;
        for(int j=0; j<filterSize; ++j){
            location.x = origin.x + j; 
            float2 velocity = texVelocity[location];
            float mag = dot(velocity, velocity);
            if(maxMagnitude<mag){
                maxMagnitude = mag;
                maxVelocity = velocity;
            }
        }
    }
    texOut[threadID.xy] = maxVelocity;
}
