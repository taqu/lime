#include "Common.scs"

cbuffer ConstantBuffer0 : register(b0)
{
    float sizeToUV;
    float pixelSize;
    int2 axis;
    float4 cascadeBlurSize;
}


Texture2DArray<float> texDepth : register(t0);
SamplerState samLinear : register(s0);
RWTexture2DArray<float4> texOut : register(u0);

[numthreads(NUMTHREADS, NUMTHREADS, 1)]
void main(uint3 threadID : SV_DispatchThreadID)
{
    float2 uv = threadID.xy*sizeToUV;

    [unroll]
    for(uint i=0; i<NUM_CASCADES; ++i){
        float d0 = texDepth.SampleLevel(samLinear, float3(uv, i), 0);
        //float d1 = texDepth.SampleLevel(samLinear, float3(uv+float2( pixelSize, 0), i), 0);
        //float d2 = texDepth.SampleLevel(samLinear, float3(uv+float2( 0,  pixelSize), i), 0);
        //float d3 = texDepth.SampleLevel(samLinear, float3(uv+float2( pixelSize,  pixelSize), i), 0);

        float d = d0;//(d0+d1+d2+d3)*0.25;
        float4 moments = encodeOptimizedMoments(d);
        texOut[uint3(threadID.xy, i)] = moments;
    }
}
