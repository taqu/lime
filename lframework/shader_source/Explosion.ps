#include "Common.ps"
#include "Explosion.inc"

cbuffer VolumeConstantPS : register(b2)
{
    VolumeConstant g_volumeConstants;
}

#include "SignedDistance.inc"

Texture2D<float4> texGradient : register(t1);
SamplerState samLinearClamp : register(s1);

float4 mapDisplacementToColor(float displacement, float time, float2 uvScaleBias)
{
    float texcoord = saturate(mad(displacement, uvScaleBias.x, time*0.4+uvScaleBias.y));
    float4 color = texGradient.SampleLevel(samLinearClamp, float2(texcoord,0), 0);
    return color;
}


float square(float2 uv)
{
    uv = abs(uv);
    float t = uv.x + uv.y;
    return smoothstep(0.9, 1.0, t)*(1-smoothstep(1.0, 1.1, t));
}

float4 funcExplosion(float3 pos, float3 spherePos, float time, float scale, float radius, floa, in const VolumeConstant volumeConstant)
{
    float outDisplacement;
    float signedDistance = signedDistancePrimitiveDisplaced(pos, spherePos, radius, volumeConstant.noiseOctaves_, time, volumeConstant, outDisplacement);

    float4 color = mapDisplacementToColor(outDisplacement, scale, volumeConstant.uvScaleBias_);

    float edgeFade = 1-smoothstep(edgeSoftness, 0, signedDistance);
    color.a *= edgeFade*0.1;
    return color;
}

float4 main(DSOutput input) : SV_TARGET0
{
    float time = input.timescale.x;
    float scale = input.timescale.y;

    float3 start = mad(input.rayDirection, input.rayHitNearFar.x, cameraPos.xyz);
    float3 end = mad(input.rayDirection, input.rayHitNearFar.y, cameraPos.xyz);

    float3 stepV = input.rayDirection * g_volumeConstants.stepSize_;
    int numSteps = min(g_volumeConstants.maxSteps_, (int)floor((input.rayHitNearFar.y - input.rayHitNearFar.x)/g_volumeConstants.stepSize_));

    float4 output = (float4)0;
    float3 pos = start;
    int steps = 0;

    float opacity = saturate((1.0-scale*scale)) * g_volumeConstants.opacity_;
    float innerRadius = scale * (g_volumeConstants.radius_ - g_volumeConstants.displacement_);
    float edgeSoftness = -innerRadius * g_volumeConstants.edgeSoftness_;
    for(int i=0; i<numSteps && output.a<1; ++i){
        float4 c=funcExplosion(pos, input.worldPos, time, scale, innerRadius, edgeSoftness, g_volumeConstants);
        c.a *= opacity;
        output = blend(c, output);
        pos += stepV;
    }
    //output.a *= opacity;
    return output;
}
