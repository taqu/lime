#ifndef INC_COMMON_SCS
#define INC_COMMON_SCS
#include "Utility.inc"
#include "Constants.inc"
#include "Color.inc"

#define CHECKSIZE_RETURN(th,tex) uint width, height; (tex).GetDimensions(width,height); if(width<=(th).x || height<=(th).y){return;}

SamplerState samPoint : register(s0);
SamplerState samLinear : register(s1);

struct BokehPoint
{
	float3 position_;
	float blur_;
	float3 color_;
};


//ToneMap
static const float ToneMapA = 0.10;//0.15 //ShoulderStrength
static const float ToneMapB = 0.50; //LinearStrength
static const float ToneMapC = 0.10; //LinearAngle
static const float ToneMapD = 0.20; //ToeStrength
static const float ToneMapE = 0.02; //ToeNumerator
static const float ToneMapF = 0.30; //ToeDenominator
static const float ToneMapW = 1.6;//11.2; //LinearWhitePoint

float3 tonemap(float3 x)
{
    return ((x*(ToneMapA*x + ToneMapC*ToneMapB) + ToneMapD*ToneMapE)/(x*(ToneMapA*x+ToneMapB) + ToneMapD*ToneMapF)) - ToneMapE/ToneMapF;
}

float tonemapLum(float x)
{
    return ((x*(ToneMapA*x + ToneMapC*ToneMapB) + ToneMapD*ToneMapE)/(x*(ToneMapA*x+ToneMapB) + ToneMapD*ToneMapF)) - ToneMapE/ToneMapF;
}

float tonemap1()
{
    return ((ToneMapW*(ToneMapA*ToneMapW + ToneMapC*ToneMapB) + ToneMapD*ToneMapE)/(ToneMapW*(ToneMapA*ToneMapW+ToneMapB) + ToneMapD*ToneMapF)) - ToneMapE/ToneMapF;
}

float calcExposure(float luminance, float keyvalue, float threshold)
{
    float exposure = log2(keyvalue/luminance) - threshold;
    return exp2(exposure);
}

float3 ToneMap(float3 color, float exposure)
{
    float3 exposed = color * exposure;

    return tonemap(exposed)/tonemap1();
}

float3 simpleToneMap(float3 color)
{
    return color/(1+RGBToLum(color));
}

float3 simpleToneMap(float3 color, float luminance)
{
    return color/(1+luminance);
}

float3 simpleInvToneMap(float3 color)
{
    return color/(1-RGBToLum(color));
}


float4 encodeOptimizedMoments(in float depth)
{
    float square = depth * depth;
    float4 moments = float4(depth, square, square * depth, square * square);
    float4 optimized = mul(moments, float4x4(-2.07224649f,    13.7948857237f,  0.105877704f,   9.7924062118f,
                                              32.23703778f,  -59.4683975703f, -1.9077466311f, -33.7652110555f,
                                             -68.571074599f,  82.0359750338f,  9.3496555107f,  47.9456096605f,
                                              39.3703274134f,-35.364903257f,  -6.6543490743f, -23.9728048165f));
    optimized[0] += 0.035955884801f;
    return optimized;
}

float3 reconstructNormalFromXY(float2 n)
{
    float d = dot(n, n);
    return (1.5<d)? (float3)0 : float3(n, -sqrt(1.0-d));
}

//cocRatio: aperture * (focal length/(focus depth - focal length)) * 1/frameHeight
float calcBlurFactor(
    in float linearDepth,
    in float focus,
    in float cocRatio,
    in float maxCoC)
{
    float coc = abs(focus-linearDepth)/linearDepth * cocRatio;
    return clamp(coc, 0, maxCoC);
}

float sampleDepth(Texture2D<float4> tex, in float2 uv)
{
    float4 depth0 = tex.GatherRed(samLinear, uv, 0);
    float4 depth1 = tex.GatherGreen(samLinear, uv, 0);
    float2 depth2 = float2(dot(depth0,(float4)1), dot(depth1,(float4)1))*0.25;
    return decode16bit(depth2.xy);
}

#endif //INC_COMMON_SCS
