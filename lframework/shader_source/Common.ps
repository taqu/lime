#ifndef INC_COMMON_PS
#define INC_COMMON_PS

#include "Utility.inc"
#include "Constants.inc"

Texture2D texAlbedo : register(t0);
Texture2D texNormal : register(t1);
TextureCube texSpecular : register(t2);

TextureCube<float3> texIrradiance : register(t3);
TextureCube<float3> texRadiance : register(t4);
Texture2DArray texShadow : register(t5);
Texture2D texLinearDepth : register(t6);

SamplerState samPoint : register(s0);
SamplerState samLinear : register(s1);

#if SHADOWMAP_TYPE==SHADOWMAP_TYPE_NOFILTER || SHADOWMAP_TYPE==SHADOWMAP_TYPE_PCF
SamplerComparisonState samShadow : register(s2);
#else
SamplerState samShadow : register(s2);
#endif

struct EnvironmentLight
{
    float3 diffuse_;
    float3 specular_;
};

#if 0
struct PointLight
{
    float3 position;
    float attenuation0;
    float3 color;
    float attenuation1;
};

StructuredBuffer<PointLight> lightBuffer : register(t5);
Texture2D<uint> lightIndices : register(t6);
Texture3D<uint2> lightClusters : register(t7);
#endif

struct DeferredOutput
{
    float4 albedo : SV_TARGET0;
    float4 specular : SV_TARGET1;
    float4 depthNormal : SV_TARGET2;
    float2 velocity : SV_TARGET3;
};

#include "Shadow.inc"
#include "Lighting.inc"

#if 0
float3 reconstructNormalFromXY(float2 n)
{
    float d = dot(n, n);
    return (1.5<d)? (float3)0 : float3(n, -sqrt(1.0-d));
}

void fillArray4(out int array[4], int4 src)
{
    array[0] = src.x;
    array[1] = src.y;
    array[2] = src.z;
    array[3] = src.w;
}
#endif

float2 decodeSphereMap(in float3 N)
{
    return float2(atan2(N.x, N.z)/PI2 + 0.5, 0.5-asin(N.y)/PI);
}

#endif //INC_COMMON_PS
