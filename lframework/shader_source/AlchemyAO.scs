#include "Common.scs"
#define NumSamples (11)
#define FarPlaneZ (500.0)
#define NumSpiralTurns (7)
#define Epsilon (0.005)

cbuffer ConstantBuffer0 : register(b0)
{
    float2 invSize;
    float radius;
    float projScale;
    float bias;
    float intensity;
    float zhalf;
    float zoffset;
    float4 proj;
}

Texture2D<float2> texLinearZ : register(t0);
Texture2D<float4> texNormal : register(t1);
Texture2D<uint> texEffectMask : register(t2);
SamplerState samLinear : register(s0);

RWTexture2D<float2> texOut : register(u0);

float3 reconstructCameraSpace(float2 texcoord, float z)
{
    //z-linear[-1,1]
    z = z*zhalf + zoffset;
    texcoord = texcoord.xy * proj.xy + proj.zw;

    return float3(texcoord * z, z);
}

void sampleCameraSpace(out float3 position, out float3 normal, float2 texcoord)
{
    float2 v = texLinearZ.SampleLevel(samLinear, texcoord, 0);
    float4 n = texNormal.SampleLevel(samLinear, texcoord, 0);

    position = reconstructCameraSpace(texcoord, v.x);
    normal = n.xyz;
}

float cameraSpaceTo01(float z)
{
    return saturate(z*(-1.0/FarPlaneZ));
}

float2 tapLocation(int sampleNumber, float spinAngle, float ssR)
{
    float alpha = float(sampleNumber + 0.5) * (1.0/(NumSamples));
    float angle = alpha * (NumSpiralTurns * 6.28) + spinAngle;

    float cs, sn;
    sincos(angle, sn, cs);
    return (alpha * ssR * float2(cs, sn));
}

float3 sampleOffset(float2 texcoord)
{
    float z = texLinearZ.SampleLevel(samLinear, texcoord, 0).x;
    return reconstructCameraSpace(texcoord, z);
}

float random(float2 seed)
{
    return frac(sin(dot(seed ,float2(12.9898,78.233))) * 43758.5453);
}

[numthreads(NUMTHREADS, NUMTHREADS, 1)]
void main(uint3 threadID : SV_DispatchThreadID)
{
    float2 color = (float2)1;
    int2 screenSpace = threadID.xy;
    float2 texcoord = screenSpace * invSize;
    uint2 maskSize;
    texEffectMask.GetDimensions(maskSize.x, maskSize.y);
    uint2 maskPos = texcoord*(maskSize-uint2(1,1));
    if(texEffectMask[maskPos].r<1){
        return;
    }

    float randomPatternRotationAngle = random(texcoord) * PI2;

    float3 cameraSpace;
    float3 cameraSpaceN;
    sampleCameraSpace(cameraSpace, cameraSpaceN, texcoord);

    color.g = cameraSpaceTo01(cameraSpace.z); //bilateral key

    float screenSpaceDiscRadius = radius * projScale / cameraSpace.z;

    float sum = 0;
    float radius2 = radius*radius;

    for(int i=0; i<NumSamples; ++i){
        float2 offset = tapLocation(i, randomPatternRotationAngle, screenSpaceDiscRadius);

        float3 Q = sampleOffset(texcoord + offset*invSize);
        float3 v = Q-cameraSpace;
        float vv = dot(v,v);
        float vn = dot(v,cameraSpaceN);
        texOut[screenSpace] = abs(vv);

        float f = max(radius2 - vv, 0.0);
        sum += f * f * max((vn - bias) / (Epsilon + vv), 0.0);
        //sum += step(-0.1, vn);
    }

    float visibility = max(0.0, 1.0-sum * intensity * (5.0/NumSamples));

#if 0
    if(abs(ddx(cameraSpace.z))<0.02){
        visibility -= ddx(visibility) * ((screenSpace.x & 1) - 0.5);
    }
    if(abs(ddy(cameraSpace.z))<0.02){
        visibility -= ddy(visibility) * ((screenSpace.y & 1) - 0.5);
    }
#endif

    color.r = visibility;

    texOut[screenSpace] = color;
}
