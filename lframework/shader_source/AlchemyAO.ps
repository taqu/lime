#include "Common.scs"
#define NumSamples (11)
#define FarPlaneZ (500.0)
#define NumSpiralTurns (7)
#define Epsilon (0.01)

cbuffer ConstantBuffer0 : register(b0)
{
    int2 size;
    float radius;
    float radius2;
    float bias;
    float intensity;
    float zhalf;
    float zoffset;
    float4 proj;
}

struct VSOutput
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};

Texture2D<float4> texLinearZNormal : register(t0);
SamplerState samLinear : register(s0);

float3 reconstructCameraSpace(float2 texcoord, float z)
{
#if 0
    //z-linear[znear,zfar]
    return float3((texcoord * proj.xy + proj.zw) * z, z);
#else
    //z-linear[-1,1]
    z = z*zhalf + zoffset;
    return float3((texcoord * proj.xy + proj.zw) * z, z);
#endif
}

void sampleCameraSpace(out float3 position, out float3 normal, float2 texcoord)
{
    float4 v = texLinearZNormal.SampleLevel(samLinear, texcoord, 0);
    position = reconstructCameraSpace(texcoord, v.x);
    normal = v.yzw;
    //normal = normalize(v.yzw);
    //normal = normalize(cross(ddx(position), ddy(position)));
}

float cameraSpaceTo01(float z)
{
    return saturate(z*(-1.0/FarPlaneZ));
}

float2 tapLocation(int sampleNumber, float spinAngle, out float ssR)
{
    float alpha = float(sampleNumber + 0.5 + 1) * (1.0/(NumSamples+1));
    float angle = alpha * (NumSpiralTurns * 6.28) + spinAngle;
    ssR = alpha;

    float cs, sn;
    sincos(angle, sn, cs);
    return float2(cs, sn);
}

float3 sampleOffset(float2 texcoord, float2 offset, float ssR)
{
    texcoord += ssR * offset;
    float z = texLinearZNormal.SampleLevel(samLinear, texcoord, 0).x;
    return reconstructCameraSpace(texcoord, z);
}

float4 main(VSOutput input) : SV_Target
{
    float4 color = float4(1,1,1,1);

    float2 texcoord = input.tex;
    int2 screenSpace = texcoord * size;

    float randomPatternRotationAngle = (3 * screenSpace.x ^ screenSpace.y + screenSpace.x * screenSpace.y) * 10;

    float3 cameraSpace;
    float3 cameraSpaceN;
    sampleCameraSpace(cameraSpace, cameraSpaceN, texcoord);

    color.g = cameraSpaceTo01(cameraSpace.z); //bilateral key

    float screenSpaceDiscRadius = radius/cameraSpace.z;
    float sum = 0;

    for(int i=0; i<NumSamples; ++i){
        float ssR;
        float2 offset = tapLocation(i, randomPatternRotationAngle, ssR);
        ssR *= screenSpaceDiscRadius;
        float3 Q = sampleOffset(texcoord, offset, ssR);
        float3 v = Q-cameraSpace;
        float vv = dot(v,v);
        float vn = dot(v,cameraSpaceN);

        //A:
        //sum += float(vv < radius2) * max((vn - bias) / (Epsilon + vv), 0.0) * radius2 * 0.6;

        //B:
        //float f = max(radius2-vv,0);
        //sum += f*f*f*max((vn-bias), 0)/(Epsilon+vv);

        //C:
        //sum += 4.0 * max(1.0 - vv/radius2, 0) * max(vn-bias, 0);
        float f = max(1.0-vv*radius2, 0);
        sum += 4.0*f*f*max(vn-bias, 0);

        //D:
        //sum += 2.0 * float(vv < radius2) * max(vn-bias, 0);
    }
    //color.rgb = sum * (1.0/NumSamples);
    //return color;
    float visibility = max(0.0, 1.0-sum * intensity * (5.0/NumSamples));
#if 0
    if(abs(ddx(cameraSpace.z))<0.02){
        visibility -= ddx(visibility) * ((screenSpace.x & 1) - 0.5);
    }
    if(abs(ddy(cameraSpace.z))<0.02){
        visibility -= ddy(visibility) * ((screenSpace.y & 1) - 0.5);
    }
#endif

    color.r = visibility;
    return color;
}
