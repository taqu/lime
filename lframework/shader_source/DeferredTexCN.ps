#include "Common.ps"

struct VSOutput
{
    float4 position : SV_POSITION;
    float3 normal : TEXCOORD0;
    float3 tangent : TEXCOORD1;
    float3 binormal : TEXCOORD2;
    float2 uv : TEXCOORD3;
    float2 position1 : TEXCOORD4;
    float2 velocity : TEXCOORD5;
};

DeferredOutput main(VSOutput input)
{
    float3 N = normalize(input.normal);
    float3 T = normalize(input.tangent);
    float3 B = normalize(input.binormal);

    //tangent to world normal
    float3x3 tangentToWorld = float3x3(T,B,N);
    N = mul(texNormal.Sample(samLinear, input.uv).xyz, tangentToWorld);

    float4 albedo = texAlbedo.Sample(samLinear, input.uv);

    DeferredOutput output;
    output.albedo.xyz = albedo.xyz * diffuse.xyz;
    output.albedo.w = shadow.w;
    output.specular = specular;
    output.normal.xyz = normalize(N);
    output.normal.w = shadow.x;
    output.velocity = input.velocity;
    output.depth = input.position1.x/input.position1.y;
    return output;
}
