#include "Common.scs"

cbuffer PerCameraConstant : register(b0)
{
    float4x4 mview;
    float4x4 minvview;
    float4x4 mproj;
    float4x4 minvproj;
    float4x4 mvp0; //previous vew projection
    float4x4 mvp1; //current view projection
    float4 cameraPos;
    int2 screenSize; //(screenWidth, screenHeight)
    float2 screenInvSize; //(screenInvWidth, screenInvHeight)
}

Texture2D<float4> texALbedo : register(t0);
Texture2D<float4> texSpecular : register(t1);
Texture2D<float4> texNormal : register(t2);
Texture2D<float2> texVelocity : register(t3);
Texture2D<float> texDepth : register(t4);
Texture2D<int2> texStencil : register(t5);

RWTexture2D<float4> texOut : register(u0);

[numthreads(NUMTHREADS, NUMTHREADS, 1)]
void main(uint3 threadID : SV_DispatchThreadID)
{
    //CHECKSIZE_RETURN(threadID, texOut);

    float2 tex = invSize*threadID.xy;
    float4 color = texColor[threadID.xy];
    //color.rgb = applyAO(color.rgb, texSAO.SampleLevel(samLinear, tex, 0).r);
    color.rgb = applyGlare(color.rgb, texGlare.SampleLevel(samLinear, tex, 0).rgb);

    texOut[threadID.xy] = color;
}
