
cbuffer ConstantBuffer0 : register(b0)
{
    float2 screenSize;
    float2 halfScreenSize;
}

struct VSOutput
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};

Texture2D hiNormalDepth : register(t0);
Texture2D lowNormalDepth : register(t1);
Texture2D lowColor : register(t2);

float4 main(VSOutput input) : SV_Target
{
    const float4 bilinearWeights[4] =
    {
        float4(9.0/16.0, 3.0/16.0, 3.0/16.0, 1.0/16.0),
        float4(3.0/16.0, 9.0/16.0, 1.0/16.0, 3.0/16.0),
        float4(3.0/16.0, 1.0/16.0, 9.0/16.0, 3.0/16.0),
        float4(1.0/16.0, 3.0/16.0, 3.0/16.0, 9.0/16.0),
    };

    int2 hiUV = (int2)(input.tex * screenSize);
    float4 hiND = hiNormalDepth.Load(int3(hiUV,0));

    int index = 2*(1-(hiUV.y&0x01)) + 1-(hiUV.x&0x01);

#if 1
    int2 lowUVBase = (int2)(input.tex * halfScreenSize);
    int2 lowUV[4];
    switch(index)
    {
    case 0:
        lowUV[0] = lowUVBase+int2(0,0);
        lowUV[1] = lowUVBase+int2(1,0);
        lowUV[2] = lowUVBase+int2(0,1);
        lowUV[3] = lowUVBase+int2(1,1);
        break;
    case 1:
        lowUV[0] = lowUVBase+int2(-1,0);
        lowUV[1] = lowUVBase+int2(0,0);
        lowUV[2] = lowUVBase+int2(-1,1);
        lowUV[3] = lowUVBase+int2(0,1);
        break;
    case 2:
        lowUV[0] = lowUVBase+int2(0,-1);
        lowUV[1] = lowUVBase+int2(1,-1);
        lowUV[2] = lowUVBase+int2(0,0);
        lowUV[3] = lowUVBase+int2(1,0);
        break;
    case 3:
        lowUV[0] = lowUVBase+int2(-1,-1);
        lowUV[1] = lowUVBase+int2(0,-1);
        lowUV[2] = lowUVBase+int2(-1,0);
        lowUV[3] = lowUVBase+int2(0,0);
        break;
    }
    float4 lowND[4];
    float4 lowC[4];
    [unroll]
    for(int i=0; i<4; ++i){
        lowND[i] = lowNormalDepth.Load(int3(lowUV[i],0));
        lowC[i] = lowColor.Load(int3(lowUV[i],0));
    }

#else

    int3 lowUVBase = int3((int2)(input.tex * halfScreenSize), 0);
    float4 lowND[4];
    float4 lowC[4];
    switch(index)
    {
    case 0:
        lowND[0] = lowNormalDepth.Load(lowUVBase, int2(0,0));
        lowND[1] = lowNormalDepth.Load(lowUVBase, int2(1,0));
        lowND[2] = lowNormalDepth.Load(lowUVBase, int2(0,1));
        lowND[3] = lowNormalDepth.Load(lowUVBase, int2(1,1));
        lowC[0] = lowColor.Load(lowUVBase, int2(0,0));
        lowC[1] = lowColor.Load(lowUVBase, int2(1,0));
        lowC[2] = lowColor.Load(lowUVBase, int2(0,1));
        lowC[3] = lowColor.Load(lowUVBase, int2(1,1));
        break;
    case 1:
        lowND[0] = lowNormalDepth.Load(lowUVBase, int2(-1,0));
        lowND[1] = lowNormalDepth.Load(lowUVBase, int2(0,0));
        lowND[2] = lowNormalDepth.Load(lowUVBase, int2(-1,1));
        lowND[3] = lowNormalDepth.Load(lowUVBase, int2(0,1));
        lowC[0] = lowColor.Load(lowUVBase, int2(-1,0));
        lowC[1] = lowColor.Load(lowUVBase, int2(0,0));
        lowC[2] = lowColor.Load(lowUVBase, int2(-1,1));
        lowC[3] = lowColor.Load(lowUVBase, int2(0,1));
        break;
    case 2:
        lowND[0] = lowNormalDepth.Load(lowUVBase, int2(0,-1));
        lowND[1] = lowNormalDepth.Load(lowUVBase, int2(1,-1));
        lowND[2] = lowNormalDepth.Load(lowUVBase, int2(0,0));
        lowND[3] = lowNormalDepth.Load(lowUVBase, int2(1,0));
        lowC[0] = lowColor.Load(lowUVBase, int2(0,-1));
        lowC[1] = lowColor.Load(lowUVBase, int2(1,-1));
        lowC[2] = lowColor.Load(lowUVBase, int2(0,0));
        lowC[3] = lowColor.Load(lowUVBase, int2(1,0));
        break;
    case 3:
        lowND[0] = lowNormalDepth.Load(lowUVBase, int2(-1,-1));
        lowND[1] = lowNormalDepth.Load(lowUVBase, int2(0,-1));
        lowND[2] = lowNormalDepth.Load(lowUVBase, int2(-1,0));
        lowND[3] = lowNormalDepth.Load(lowUVBase, int2(0,0));
        lowC[0] = lowColor.Load(lowUVBase, int2(-1,-1));
        lowC[1] = lowColor.Load(lowUVBase, int2(0,-1));
        lowC[2] = lowColor.Load(lowUVBase, int2(-1,0));
        lowC[3] = lowColor.Load(lowUVBase, int2(0,0));
        break;
    }
#endif

    float totalWeight = 0.0;
    float4 color = (float4)0;
    for(int j=0; j<4; ++j){
        float normalWeight = pow(max(dot(lowND[j].xyz, hiND.xyz),0), 32);
        float depthWeight = 1.0/(abs(hiND.w - lowND[j].w)+0.0001);
        float weight = normalWeight * depthWeight * bilinearWeights[index][j];
        totalWeight += weight;
        color += lowC[j] * weight;
    }
    return color/totalWeight;   
}
