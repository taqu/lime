#include "Common.ps"

struct VSOutput
{
    float4 position : SV_POSITION;
    float3 normal : TEXCOORD0;
    float3 tangent : TEXCOORD1;
    float3 binormal : TEXCOORD2;
    float2 uv : TEXCOORD3;
    float3 worldPos : TEXCOORD4;
    float3 viewPos : TEXCOORD5;
};

float4 main(VSOutput input) : SV_TARGET0
{
    float4 albedo = texAlbedo.Sample(samLinear, input.uv) * diffuse;

    float3 N = normalize(input.normal);
    float3 T = normalize(input.tangent);
    float3 B = normalize(input.binormal);

    //tangent to world normal
    float3x3 tangentToWorld = float3x3(T,B,N);
    N = mul(texNormal.Sample(samLinear, input.uv).xyz, tangentToWorld);

    float3 V = normalize(cameraPos.xyz - input.worldPos.xyz);

    Material material;
    material.albedo = albedo.rgb;
    material.specular = specular.rgb;
    material.roughness = specular.w;
    material.metalic = shadow.w;
    material.ambientOcclusion = 1;

    DirectionalLight dlight;
    dlight.color = dlColor;
    dlight.direction = dlDir;
    IncidentLight incidentLight;
    irradianceDirectionalLight(incidentLight, dlight);

    float shadowAttenuation = 1;

    EnvironmentLight envLight;
    envLight.diffuse_ = irradianceDiffuse(texIrradiance, samLinear, N);
    envLight.specular_ = radianceSpecular(texRadiance, samLinear, N, V, material.roughness, specularMapMipLevels);

    float4 color;
    color.rgb = lightSurface(N, V, incidentLight, material, shadowAttenuation, envLight);
    color.a = albedo.w;
    return color;
}
