#include "Common.scs"

cbuffer ConstantBuffer0 : register(b0)
{
    float4 clipInfo0;
    float4 clipInfo1;
    float4 proj;
    float2 invDepthSize;
    float2 ratioSize;
    
    float focus;
    float cocRatio; //aperture * (focal length/(focus depth - focal length)) * 1/frameHeight
    float maxCoC;
    float reserved;
}

Texture2D texDepth : register(t0);
SamplerState samLinear : register(s0);
RWTexture2D<float2> texLinearZBlurFactor : register(u0);
RWTexture2D<float4> texNormal : register(u1);

//z-nonlinear to z-linear[-1,1]
float reconstruct0(float d)
{
    //z-nonlinear to z-linear[-1,1]
    return clipInfo0[0]/(clipInfo0[1]*d + clipInfo0[2]) - clipInfo0[3];
}

//z-nonlinear to z-linear[znear,zfar]
float reconstruct1(float d)
{
    //z-nonlinear to z-linear[znear,zfar]
    return clipInfo1[0]/(clipInfo1[1]*d + clipInfo1[2]);
}

float3 reconstructCameraSpace(int2 screenSpace, float z)
{
    return float3((screenSpace * proj.xy + proj.zw) * z, z);
}

#if 0
float3 sampleCameraSpace(int2 screenSpace, Texture2D tex)
{
    return reconstructCameraSpace(screenSpace, reconstruct1(tex[screenSpace].x));
}
#else
float3 sampleCameraSpace(int2 screenSpace, Texture2D tex)
{
    float2 texcoord = invDepthSize*screenSpace;
    return reconstructCameraSpace(screenSpace, reconstruct1(tex.SampleLevel(samLinear, texcoord, 0).x));
}
#endif

[numthreads(NUMTHREADS, NUMTHREADS, 1)]
void main(uint3 threadID : SV_DispatchThreadID)
{
    //CHECKSIZE_RETURN(threadID, texOut);
    
    int2 ss = (int2)(threadID.xy*ratioSize);
    float d = texDepth[ss].x;
    float depth = reconstruct0(d);
    
    float3 normal;
    if(0.9999<=d){
        normal = (float3)0;
    }else{
        int2 lu = ss + int2(-1, -1);
        int2 rd = ss + int2(1, 1);
        //lu = clamp(lu, (int2)0, depthLimit);
        //rd = clamp(rd, (int2)0, depthLimit);

        float3 x0 = sampleCameraSpace(int2(lu.x,ss.y), texDepth);
        float3 x1 = sampleCameraSpace(int2(rd.x,ss.y), texDepth);

        float3 y0 = sampleCameraSpace(int2(ss.x,rd.y), texDepth);
        float3 y1 = sampleCameraSpace(int2(ss.x,lu.y), texDepth);

        float3 vx = (x1-x0);
        float3 vy = (y1-y0);
        float3 n = cross(vy, vx);
        normal = normalize(n);
    }
    texLinearZBlurFactor[threadID.xy] = float2(depth, calcBlurFactor(reconstruct1(d), focus, cocRatio, maxCoC));
    texNormal[threadID.xy] = float4(normal, 1);
}
