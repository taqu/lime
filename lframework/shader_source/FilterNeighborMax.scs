#include "Common.scs"

cbuffer ConstantBuffer0 : register(b0)
{
    int2 size;
    int filterSize;
    int reserved;
}

Texture2D<float2> texVelocity : register(t0);
RWTexture2D<float2> texOut : register(u0);

void clacNonDiagonalMaxVelocity(inout float maxMagnitude, inout float2 maxVelocity, int2 location)
{
    float2 velocity = texVelocity[location];
    float mag = dot(velocity, velocity);
    if(maxMagnitude<mag){
        maxMagnitude = mag;
        maxVelocity = velocity;
    }
}

void diagonalMaxVelocity(inout float maxMagnitude, inout float2 maxVelocity, int2 location, float2 direction)
{
    float2 velocity = texVelocity[location];
    float mag = dot(velocity, velocity);
    if(0.01<mag && maxMagnitude<mag){
        float d = dot(direction, velocity)/sqrt(mag);
        if(d<-0.866){
            maxMagnitude = mag;
            maxVelocity = velocity;
        }
    }
}

#define INV_ROOT2 0.70710678118

[numthreads(NUMTHREADS, NUMTHREADS, 1)]
void main(uint3 threadID : SV_DispatchThreadID)
{
    CHECKSIZE_RETURN(threadID, texOut);

    int2 origin = threadID.xy;
    float2 maxVelocity = texVelocity[origin];
    float maxMagnitude = dot(maxVelocity, maxVelocity);

    clacNonDiagonalMaxVelocity(maxMagnitude, maxVelocity, origin+int2(-1, 0));
    clacNonDiagonalMaxVelocity(maxMagnitude, maxVelocity, origin+int2( 1, 0));
    clacNonDiagonalMaxVelocity(maxMagnitude, maxVelocity, origin+int2( 0,-1));
    clacNonDiagonalMaxVelocity(maxMagnitude, maxVelocity, origin+int2( 0, 1));

    diagonalMaxVelocity(maxMagnitude, maxVelocity, origin+int2(-1,-1), float2(-INV_ROOT2, -INV_ROOT2));
    diagonalMaxVelocity(maxMagnitude, maxVelocity, origin+int2( 1,-1), float2( INV_ROOT2, -INV_ROOT2));
    diagonalMaxVelocity(maxMagnitude, maxVelocity, origin+int2(-1, 1), float2(-INV_ROOT2,  INV_ROOT2));
    diagonalMaxVelocity(maxMagnitude, maxVelocity, origin+int2( 1, 1), float2( INV_ROOT2,  INV_ROOT2));

#if 0
    for(int i=-1; i<1; ++i){
        location.y = origin.y + i;
        for(int j=-1; j<1; ++j){
            location.x = origin.x + j; 
            float2 velocity = texVelocity[location];
            float mag = dot(velocity, velocity);
            if(maxMagnitude<mag){
                maxMagnitude = mag;
                maxVelocity = velocity;
            }
        }
    }
#endif
    texOut[origin] = maxVelocity;
}
