#include "Common.ps"
#include "Volume.inc"
#include "SignedDistance.inc"

Texture3D<float4> texColorNoise : register(t0);
SamplerState samLinearMirror: register(s0);

float noise(in float3 x)
{
#if 0
    float3 f = frac(x);
    float3 p = floor(x);
    f = f*f*(3.0 - 2.0*f);
    float2 uv = (p.xy + float2(37.0, 17.0) * p.z) + f.xy;
    float2 rg = texColorNoise.SampleLevel(samLinearMirror, uv/256.0, 0).rg;
    return lerp(rg.x, rg.y, f.z);
#else
    return texColorNoise.SampleLevel(samLinearMirror, x, 0).r;
#endif
}

float fbm(float3 x)
{
    float f;
    float3 q = x; f  = 0.50000*noise(q);
	q = q*2.02; f += 0.25000*noise(q);
	q = q*2.03; f += 0.12500*noise(q);
	q = q*2.01; f += 0.06250*noise(q);
	q = q*2.02; f += 0.03125*noise(q);
    return f/(0.9375);
}


float3 heatToColor(float heat)
{
    const float4 c0 = float4(2, 2, 2, 2);	// white
	const float4 c1 = float4(2, 2, 0, 1);	// yellow
    const float4 c2 = float4(2, 1, 0, 1);	// orange
	const float4 c3 = float4(0.3, 0.05, 0.0, 1);	// red
    const float4 c4 = float4(0.01, 0.01, 0.01, 4);	// gray

    float t0 = step(0.80, heat);
    float t1 = step(0.60, heat);
    float t2 = step(0.40, heat);
    float t3 = step(0.00, heat);

    float3 color;
    color  = lerp(c1.rgb, c0.rgb, smoothstep(0.80, 1.00, heat)) * t0;
    color += lerp(c2.rgb, c1.rgb, smoothstep(0.60, 0.80, heat)) * t1*(1-t0);
    color += lerp(c3.rgb, c2.rgb, smoothstep(0.40, 0.60, heat)) * t2*(1-t1);
    color += lerp(c4.rgb, c3.rgb, smoothstep(0.00, 0.40, heat)) * t3*(1-t2);
    return color;
}

float calcHeat(float density, float radius, float time)
{
    const float WIDTH = 0.75;
    const float HALF = WIDTH*0.5;
    float minh = max(0, time-HALF);
    float maxh = min(1, time+HALF);
    float heat = smoothstep(0, 1, density)*WIDTH + minh;
    float r = max(0, -radius);
    return saturate(heat*r);
}

#define STEP (0.01)
#define MAXSTEPS (15)

float4 main(DSOutput input) : SV_TARGET0
{
    float time = input.timescale.x;
    float scale = input.timescale.y;
    float radius = input.radius.x*scale;
    float invRadius = 1.0/radius;
    float freqScale = input.radius.y;
    float3 dir = input.rayDirection;
    float nearD = input.rayHitNearFar.x;
    float farD = input.rayHitNearFar.y;
    float3 position = input.worldPos;

    float3 start = mad(dir, nearD, cameraPos.xyz);
    float3 end = mad(dir, farD, cameraPos.xyz);

    uint numSteps = min(MAXSTEPS, (farD-nearD)/STEP);
    float invStep = 1.0/numSteps;
    float step = MAXSTEPS*invStep*1.33;
    float3 stepAmount = dir * invStep;
    float3 pos = start;

    float3 offsetScale = float3(-0.00531, -0.00547, -0.00523)*time;
    float displacementScale = 0.3;//0.2;
    float revTime = 1.0-time;
    float4 color = 0.0.xxxx;
    for(uint count=0; count<numSteps && color.a<0.99; ++count){
        float3 relativePos = pos-position;
        float3 n = normalize(relativePos);
        float displacementOut = fbm(pos*freqScale + pos*offsetScale);
        float signedDistanceToPrimitive = sdSphere(relativePos, radius)*invRadius;
        float distance = signedDistanceToPrimitive + displacementOut;

        //float edgeFade = (1.0-smoothstep(0.01, 0.2, displacementOut)) * (1.0-smoothstep(-0.25, -0.02, signedDistanceToPrimitive));
        float edgeFade = min(1, (1.0-smoothstep(0.01-0.25, displacementScale-0.01, distance))*step);
        float heat = calcHeat(displacementOut, signedDistanceToPrimitive, revTime);
        float4 c = float4(heatToColor(heat), edgeFade);
        color = blend(color, c);
        pos += stepAmount;
    }
    float timeFade = smoothstep(0.0, 0.25, revTime);
    color *=timeFade;
    color = max(color,0);
    return color;
}
