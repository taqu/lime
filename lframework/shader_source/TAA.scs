#include "Common.scs"

cbuffer ReconsturctConstant : register(b0)
{
    float2 invSize;
    float lowFreqThreshold;
    float hiFreqThreshold;
}

Texture2D<float4> texPrevAccumFrame : register(t0);
Texture2D<float4> texCurrentFrame : register(t1);
Texture2D<float2> texVelocity : register(t2);
RWTexture2D<float4> texOut : register(u0);

SamplerState samLinear : register(s0);

float3 toneMap(float3 v, float lum)
{
    return v/(1+lum);
}

float3 invToneMap(float3 v, float lum)
{
    return v/(1-lum);
}

[numthreads(NUMTHREADS, NUMTHREADS, 1)]
void main(uint3 threadID : SV_DispatchThreadID)
{
    //CHECKSIZE_RETURN(threadID, texOut);
    int2 location = threadID.xy;
    float2 texcoord = location*invSize;

    float4 color = texCurrentFrame.SampleLevel(samLinear, texcoord, 0);

    float2 velocity = texVelocity.SampleLevel(samLinear, texcoord, 0);
    float2 prevTexcoord = texcoord + velocity * invSize;
    float3 acc = texPrevAccumFrame.SampleLevel(samLinear, prevTexcoord, 0).rgb;

    float2 tl = texcoord - invSize;
    float2 br = texcoord + invSize;

    float3 Ctl = texCurrentFrame.SampleLevel(samLinear, tl, 0).rgb;
    float3 Ctr = texCurrentFrame.SampleLevel(samLinear, float2(br.x, tl.y), 0).rgb;
    float3 Cbl = texCurrentFrame.SampleLevel(samLinear, float2(tl.x, br.y), 0).rgb;
    float3 Cbr = texCurrentFrame.SampleLevel(samLinear, br, 0).rgb;

    float3 Cmax = max(Ctl, max(Ctr, max(Cbl, Cbr)));
    float3 Cmin = min(Ctl, min(Ctr, min(Cbl, Cbr)));
    float3 wk = abs((Ctl+Ctr+Cbl+Cbr)*0.25 - color.rgb);

    acc = clamp(acc, Cmin, Cmax);
    //acc = toneMap(acc, RGBToLum(acc));
    //float lum = RGBToLum(color.rgb);
    //color.rgb = toneMap(color.rgb, lum);

    float3 result = lerp(color.rgb, acc, saturate(rcp(lerp(lowFreqThreshold,hiFreqThreshold,wk))));
    //result = invToneMap(result, lum);

    texOut[location] = float4(result, color.a);
    //texOut[location] = color;
}
