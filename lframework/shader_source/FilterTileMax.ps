cbuffer ConstantBuffer0 : register(b0)
{
    int2 numTiles;
    int filterSize;
    int blurRadius_;
}

struct VSOutput
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};

Texture2D texVelocity : register(t0);

float2 main(VSOutput input) : SV_Target
{
    int2 origin = (int2)(input.tex*numTiles*filterSize);
    int3 location = (int3)0;
    float maxMagnitude = 0.0;
    float2 maxVelocity = (float2)0;
    for(int i=0; i<filterSize; ++i){
        location.y = origin.y + i;
        for(int j=0; j<filterSize; ++j){
            location.x = origin.x + j; 
            float2 velocity = texVelocity.Load(location).xy;
            float mag = dot(velocity, velocity);
            if(maxMagnitude<mag){
                maxMagnitude = mag;
                maxVelocity = velocity;
            }
        }
    }
    return maxVelocity;
}
