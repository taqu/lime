cbuffer ConstantBuffer : register(b0)
{
    float4 dlDir;
    float4 dlColor;
    float4x4 mw;
    float4x4 mlvp;
    float4 shadowMapSize;
}

Texture2D texAlbedo : register(t0);
Texture2D texNormal : register(t1);
Texture2D texShadow : register(t2);

SamplerState samAlbedo : register(s0);
SamplerState samNormal : register(s1);
SamplerState samShadow : register(s2);

struct VSOutput
{
    float4 position : SV_POSITION;
    float2 tex0 : TEXCOORD0;
    float3 worldPos : TEXCOORD1;
};

float shadowCompare(float2 texcoord, float depth)
{
    float shadowDepth = texShadow.Sample(samShadow, texcoord).r;
    return step(depth, shadowDepth);
}

float3 PCF(float2 texcoord, float depth)
{
    float result = 0.0;
    for(int y=-1; y<=1; ++y){
        for(int x=-1; x<=1; ++x){
            float2 offset = float2(x,y)*shadowMapSize.zw;
            result += shadowCompare(texcoord+offset, depth);
        }
    }
    return saturate(float3(0.5, 0.5, 0.5) + result/9.0);
}

float4 main(VSOutput input) : SV_Target
{
    float3 normal = texNormal.Sample(samNormal, input.tex0).xyz;
    normal *= 2;
    normal -= float3(1,1,1);
    normal = normalize(normal);
    normal = mul(normal, (float3x3)mw);

    float cosNL = max(dot(dlDir.xyz, normal), 0);

    float4 albedo = texAlbedo.Sample(samAlbedo, input.tex0);

    // diffuse
    //-------------
    float3 texS = mul(float4(input.worldPos, 1), mlvp).xyz;
    texS.z = saturate(texS.z);

    float3 shadowInfluence = PCF(texS.xy, texS.z);

    float3 irradiance = dlColor.xyz * shadowInfluence * cosNL + float3(0.3f,0.3f,0.3f);//ambient.xyz;

    float4 color;
    color.xyz = irradiance * albedo.xyz;
    color.w = albedo.w;
    return color;
}
