#include "Common.ps"
#include "Volume.inc"
#include "SignedDistance.inc"


float3 calcColor(float y, float time)
{
    const float4 c0 = float4(2, 2, 2, 2);	// white
	const float4 c1 = float4(0.5, 0.5, 1.5, 1);	// light blue
    const float4 c2 = float4(0.25, 0.25, 1, 1);	// blue
    const float4 c3 = float4(0.0, 0.0, 0.5, 1);	// dark blue

    float t0 = step(0.667, y);
    float t1 = step(0.333, y);
    float t2 = step(0.000, y);

    float3 color;
    color  = lerp(c1.rgb, c0.rgb, smoothstep(0.667, 1.000, y)) * t0;
    color += lerp(c2.rgb, c1.rgb, smoothstep(0.333, 0.667, y)) * t1*(1-t0);
    color += lerp(c3.rgb, c2.rgb, smoothstep(0.000, 0.333, y)) * t2*(1-t1);
    return color;
}

#define STEP (0.01)
#define MAXSTEPS (1)

float4 main(DSOutput input) : SV_TARGET0
{
    float time = input.timescale.x;
    float scale = input.timescale.y;
    float radius = input.radius.x*scale;
    float invRadius = 1.0/radius;
    //float freqScale = input.radius.y;
    float3 dir = input.rayDirection;
    float nearD = input.rayHitNearFar.x;
    float farD = input.rayHitNearFar.y;
    float3 position = input.worldPos;
    float3 lightDir = -dlDir.xyz;
    float2 uv = input.texcoord;
    float depth = linearZToDistance(texLinearDepth.SampleLevel(samLinear, uv, 0).r, linearZParam)-0.001;
    float clipY = (0.75<time)? (1-time)/0.25 : 1;
    float thickness = (farD-nearD)*0.1;
    float3 stepAmount = dir * (thickness/MAXSTEPS);
    float3 pos;
    pos = mad(dir, farD, cameraPos.xyz);
    float4 color = 0.0.xxxx;
    {
        float3 relativePos = pos-position;
        float r = saturate(length(relativePos)*invRadius);
        float3 n = normalize(relativePos);
        float shade = smoothstep(-1.0, 1.0, dot(n, lightDir));
        float y = max(relativePos.y, 0);
        float fade = step(0, relativePos.y) * 0.9*(1-step(clipY, y));

        color = float4(calcColor(y, time)*shade, fade) * step(farD, depth);
    }

    pos = mad(dir, nearD, cameraPos.xyz);
    {
        float3 relativePos = pos-position;
        float r = saturate(length(relativePos)*invRadius);
        float3 n = normalize(relativePos);
        float shade = smoothstep(-1.0, 1.0, dot(n, lightDir));
        float y = max(relativePos.y, 0);
        float fade = step(0, relativePos.y) * 0.9*(1-step(clipY, y));
        float4 c = float4(calcColor(y, time)*shade, fade) * step(nearD, depth);
        color = blendAlpha(color, c);
    }
    return color;
}
