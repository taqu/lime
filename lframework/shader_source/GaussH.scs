#include "Common.scs"
#define R (4)
#define GRIDSIZE (128)
#ifdef NUMTHREADS
#undef NUMTHREADS
#endif
#define NUMTHREADS (GRIDSIZE+R*2)

static const float gaussian[R+1] = {0.398943, 0.241971, 0.0539911, 0.00443186, 0.000133831,};

Texture2D<float4> texIn : register(t0);
SamplerState samPoint : register(s0);
SamplerState samLinear : register(s1);
RWTexture2D<float4> texOut : register(u0);

//in D3D10 the maximum total size of all variables with the groupshared storage class is 16kb, in D3D11 the maximum size is 32kb
groupshared float4 sharedSamples[NUMTHREADS];

[numthreads(NUMTHREADS, 1, 1)]
void main(uint3 groupID : SV_GroupID, uint3 groupThreadID : SV_GroupThreadID)
{
    int width, height;
    texIn.GetDimensions(width, height);

    const int gridStartX = groupID.x * GRIDSIZE;
    const int gridX = (int)groupThreadID.x - R;

    const int sampleX = gridStartX + gridX;
    const int sampleY = groupID.y;
    int2 samplePosition = int2(sampleX, sampleY);

    float2 texcoord = saturate((samplePosition+0.5f)/float2(width,height));
    float4 color = texIn.SampleLevel(samPoint, texcoord, 0);
    sharedSamples[groupThreadID.x] = color;

    GroupMemoryBarrierWithGroupSync();

    if(0<=gridX && gridX<GRIDSIZE && sampleX<width){
        int groupThreadIDX = (int)groupThreadID.x; //[r GRIDSIZE)
        float4 sum = (float4)0;
        float w = 0;
        [unroll]
        for(int r=-R; r<=R; ++r){
            int tap = groupThreadIDX + r;
            float4 sample = sharedSamples[tap];
            float weight = gaussian[abs(r)];
            sum += sample * weight;
        }
        texOut[samplePosition] = sum;
    }
}
