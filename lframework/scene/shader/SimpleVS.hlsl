"static const float PI = 3.14159265358979323846;\n"
"static const float PI2 = 6.28318530717958647692;\n"
"static const float INV_PI = 0.31830988618379067153;\n"
"static const float INV_PI2 = 0.15915494309189533576;\n"
"static const int c_izero = 0;\n"
"static const int c_ione = 1;\n"
"static const int c_itwo = 2;\n"
"static const int c_ithree = 3;\n"
"uniform float4x4 mwvp; //World * View * Projection Matrix\n"
"#if defined(VDIFFUSE) && defined(PCOLOR)\n"
"uniform float3 dlDir;\n"
"uniform float4 dlColor;\n"
"//„Éû„ÉÜ„É™„Ç¢„É´Ë®≠ÂÆÅE\n"
"uniform float3 ambient;\n"
"#endif\n"
"#ifdef SKINNING\n"
"#define NUM_PALETTE_MATRICES 80\n"
"uniform float4 palette[NUM_PALETTE_MATRICES*3];\n"
"float4 skinning_position(uniform float4 position, uniform float weight, uniform int index)\n"
"{\n"
"    float4 tmp;\n"
"    //tmp.xyz = mul(position, palette[index]);\n"
"    tmp.x = dot(position, palette[index      ]);\n"
"    tmp.y = dot(position, palette[index+c_ione]);\n"
"    tmp.z = dot(position, palette[index+c_itwo]);\n"
"    tmp.w = position.w;\n"
"    return (weight * tmp);\n"
"}\n"
"float3 skinning_normal(uniform float3 normal, uniform float weight, uniform int index)\n"
"{\n"
"    //float3 tmp = mul(float4(normal,0.0), palette[index]);\n"
"    float3 tmp;\n"
"    tmp.x = dot(normal, palette[index      ].xyz);\n"
"    tmp.y = dot(normal, palette[index+c_ione].xyz);\n"
"    tmp.z = dot(normal, palette[index+c_itwo].xyz);\n"
"    return (weight * tmp);\n"
"}\n"
"void skinning(in float4 position, in float3 normal, out float4 retPosition, out float3 retNormal, uniform float4 indices)\n"
"{\n"
"    retPosition = (float4)float(c_izero);\n"
"    retNormal = (float3)float(c_izero);\n"
"    float weight = indices.z * 0.01f;\n"
"    int index = int(indices.x) * c_ithree;\n"
"    retPosition += skinning_position(position, weight, index);\n"
"    retNormal += skinning_normal(normal, weight, index);\n"
"    weight = float(c_ione) - weight;\n"
"    index = int(indices.y) * c_ithree;\n"
"    retPosition += skinning_position(position, weight, index);\n"
"    retNormal += skinning_normal(normal, weight, index);\n"
"}\n"
"#endif\n"
"//--------------------------------\n"
"struct VSInput\n"
"{\n"
"    float4 position    : POSITION;\n"
"#ifdef VNORMAL\n"
"    float3 normal      : NORMAL;\n"
"#endif\n"
"#ifdef VTEX0\n"
"    float2 tex0   : TEXCOORD0;\n"
"#endif\n"
"#ifdef VBONE\n"
"    float4 bones       : BLENDINDICES;\n"
"#endif\n"
"};\n"
"struct VS_OUTPUT\n"
"{\n"
"    float4 position : POSITION0;\n"
"#ifdef PNORMAL\n"
"    float3 normal : TEXCOORD1;\n"
"#endif\n"
"#ifdef PCOLOR\n"
"    float3 color : COLOR0;\n"
"#endif\n"
"#ifdef PTEX0\n"
"    float2 tex0 : TEXCOORD0;\n"
"#endif\n"
"#ifdef PPOS\n"
"    float3 pos0 : TEXCOORD2;\n"
"#endif\n"
"};\n"
"VS_OUTPUT main(VSInput input)\n"
"{\n"
"    VS_OUTPUT output= (VS_OUTPUT)0;\n"
"    float4 position;\n"
"    float3 normal;\n"
"#ifdef SKINNING\n"
"    skinning(input.position, input.normal, position, normal, input.bones);\n"
"#else\n"
"    position = input.position;\n"
"#ifdef V_NORMAL\n"
"    normal = input.normal;\n"
"#endif\n"
"#endif\n"
"    output.position = mul(position, mwvp);\n"
"#ifdef PPOS\n"
"    output.pos0 = position.xyz;\n"
"#endif\n"
"#ifdef PNORMAL\n"
"    output.normal = normal;\n"
"#endif\n"
"#ifdef PTEX0\n"
"    output.tex0 = input.tex0;\n"
"#endif\n"
"#if defined(VDIFFUSE) && defined(PCOLOR)\n"
"    // „É©„Ç§„ÉÅEÇ£„É≥„Ç∞Ë®àÁÆÅE\n"
"    float3 L = dlDir;\n"
"    output.color = ambient + dlColor.w * max(dlColor.xyz * dot(normal, L), 0.0f);//Irradiance„ÄÇ„Åü„Å∂„Çì„Åì„Çì„Å™ÊÑü„Åò\n"
"#endif\n"
"    return output;\n"
"}\n"
