"precision mediump float;\n"
"precision mediump int;\n"
"#ifdef PNORMAL\n"
"varying vec3 v_normal;\n"
"#endif\n"
"#ifdef PCOLOR\n"
"varying  vec4 v_color0;\n"
"#endif\n"
"#ifdef PTEX0\n"
"varying vec2 v_tex0;\n"
"#endif\n"
"#ifdef PPOS\n"
"varying vec3 v_pos0;\n"
"#endif\n"
"const float c_fzero = 0.0;\n"
"const float c_fone = 1.0;\n"
"const float PI = 3.14159265358979323846;\n"
"const float PI2 = 6.28318530717958647692;\n"
"const float INV_PI = 0.31830988618379067153;\n"
"const float INV_PI_2 = 0.63661977236758134306;\n"
"const float ALPHA_REF = 0.5;\n"
"#ifdef LIGHTVS\n"
"uniform vec3 ambient;\n"
"uniform vec4 dlColor;\n"
"uniform vec4 diffuse;\n"
"uniform vec3 emissive;\n"
"varying vec4 v_specular0;\n"
"#ifdef TEXSHADE\n"
"varying vec2 v_tex3;\n"
"#endif\n"
"#else //LIGHTVS\n"
"uniform vec3 dlDir;\n"
"uniform vec4 dlColor;\n"
"uniform vec3 camPos;\n"
"uniform vec4 diffuse;\n"
"uniform vec3 ambient;\n"
"uniform vec3 emissive;\n"
"#endif //LIGHTVS\n"
"#ifdef PNORMAL\n"
"uniform vec4 specular;\n"
"#endif\n"
"#if defined(PTEX0)\n"
"uniform sampler2D texAlbedo;\n"
"#endif\n"
"void main()\n"
"{\n"
"    //-------------\n"
"    vec4 color;\n"
"#ifdef TEXALBEDO\n"
"    color = texture2D(texAlbedo, v_tex0);\n"
"//#ifdef EMISSIVE\n"
"    color *= diffuse;\n"
"//#endif\n"
"#elif defined(LIGHTVS)\n"
"#else\n"
"    color = diffuse;\n"
"#endif\n"
"#ifdef PCOLOR\n"
"    color *= v_color0;\n"
"#endif\n"
"// omit alpha test\n"
"#ifdef ALPHATEST\n"
"    //if(color.w<ALPHA_REF){\n"
"    //    discard;\n"
"    //}else{\n"
"#endif\n"
"#ifdef LIGHTVS\n"
"#ifdef TEXSHADE\n"
"    vec3 c = texture2D(texAlbedo2, v_tex3).xyz;\n"
"    color.xyz = (color.xyz * c + v_specular0.xyz) * dlColor.xyz + ambient * color.xyz;\n"
"#else\n"
"    color.xyz = (color.xyz * v_specular0.w + v_specular0.xyz) * dlColor.xyz + ambient * color.xyz;\n"
"#endif //TEXSHADE\n"
"#elif defined(TEXSHADE)\n"
"#elif defined(PNORMAL)\n"
"    vec3 L = dlDir;\n"
"    vec3 N = normalize(v_normal);\n"
"    vec3 E = normalize(camPos - v_pos0);\n"
"    vec3 H = normalize(L+E);\n"
"    float cosNH = max(c_fzero, dot(N,H));\n"
"    float shininess = specular.w;\n"
"    float rs = pow(cosNH, shininess);\n"
"    color.xyz = (color.xyz * cosNH + specular.xyz * rs) * dlColor.xyz + ambient * color.xyz;\n"
"#else\n"
"    color.xyz *= (dlColor.xyz + ambient);\n"
"#endif\n"
"#ifdef EMISSIVE\n"
"    color.xyz += emissive;\n"
"#endif\n"
"    gl_FragColor = color;\n"
"#ifdef ALPHATEST\n"
"    //}\n"
"#endif\n"
"}\n"
