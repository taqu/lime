precision mediump float;
precision mediump int;

#ifdef PNORMAL
varying vec3 v_normal;
#endif

#ifdef PCOLOR
varying  vec3 v_color0;
#endif

#ifdef PTEX0
varying vec2 v_tex0;
#endif

#ifdef PTEX1
varying vec2 v_tex1;
#endif

#ifdef PPOS
varying vec3 v_pos0;
#endif

const float c_fzero = 0.0;
const float c_fone = 1.0;
const float PI = 3.14159265358979323846;
const float PI2 = 6.28318530717958647692;
const float INV_PI = 0.31830988618379067153;
const float INV_PI_2 = 0.63661977236758134306;

uniform vec3 dlDir;
uniform vec4 dlColor;
uniform vec3 camPos;

#ifdef FRESNEL

const float c_ffive = 5.0;
const float c_fresnel0 = 0.0397436;
const float c_fresnel1 = 0.0856832;

uniform vec4 specular;
uniform float fresnel;

// calculate fresnel term for diffuse and specular
void calc_fresnel(out float fd, out float fs, float F, float eh, float nl)
{
  float F2 = c_fone - F;
  fs = F + F2*pow((c_fone - eh), c_ffive);
  fd = F + F2*pow((c_fone - nl), c_ffive);
}

#else

#if defined(TEXSHADE)
const float c_fhalf = 0.5;
const float c_fratio = 0.75;

#elif defined(P_NORMAL)
const float c_ftwo = 2.0
uniform vec4 specular;
#endif

#endif

uniform vec4 diffuse;
uniform vec3 ambient;
uniform vec3 emissive;

#ifdef PTEX0
uniform sampler2D texAlbedo;
#endif

#ifdef PTEX1
uniform sampler2D texToon;
#endif

void main()
{
    //-------------
    vec4 color;

#if defined(PTEX0) && !defined(TEXSHADE)
    color = texture2D(texAlbedo, v_tex0);
#else
    color = diffuse;
#endif
    color.xyz *= dlColor.xyz;


#if defined(FRESNEL)

    //F0: vertical reflectance
    //N: normal, L:light vector, E: eye ector, H: normalize(L+E)
    //Fd(F0) = F0 + (1-F0)(1-NL)^5   Fs(F0) = F0 + (1-F0)*(1-EH)^5
    //approximation (shininess+2)/(4*pi*(2-2^*(-shininess/2)) = (shininess+2.04)/8*pi = 0.0397436 * shininess + 0.0856832
    //Rd*(1.0/pi)*(1.0 - Rs*Fd(F0))*(NL) + Rs * (shininess+2)/(4*pi*(2-2^(-shininess/2)) * Fs(F0) * NH^shininess
    vec3 L = dlDir;
    vec3 N = normalize(v_normal);
    vec3 E = normalize(camPos - v_pos0);
    vec3 H = normalize(L+E);

    float cosNL = max(c_fzero, dot(N,L));
    float cosEH = max(c_fzero, dot(E,H));
    float cosNH = max(c_fzero, dot(N,H));

    float fd, fs;
    calc_fresnel(fd, fs, fresnel, cosEH, cosNL);

    float shininess = specular.w;

    float rs = (c_fresnel0 * shininess + c_fresnel1) * fs * pow(cosNH, shininess);
    vec3 rd = (vec3(c_fone, c_fone, c_fone) - specular.xyz*fd) * INV_PI;
    color.xyz *= (color.xyz * rd * cosNL + specular.xyz * rs);
    color.xyz += ambient * rd;

#elif defined(TEXSHADE)
    vec3 N = normalize(v_normal);
    vec3 L = dlDir;
    vec3 E = normalize(camPos - v_pos0);
    vec2 sample;
    sample.x = (dot(N, E) + c_fone) * c_fhalf;
    sample.y = (dot(N, L) + c_fone) * c_fhalf;

    vec4 c = texture2D(texAlbedo, sample);

    color.xyz += ambient;
    color.xyz *= c.xyz;
    //color.xyz *= c_fratio;

#elif defined(PNORMAL)
    //Rd * (1/pi) cosNL + Rs * (shininess+2)/(2*pi) * NH^shininess
    //vec3 L = dlDir;
    //vec3 N = normalize(v_normal);
    //vec3 E = normalize(camPos - v_pos0);
    //vec3 H = normalize(L+E);

    //float cosNL = max(c_fzero, dot(N,L));
    //float cosNH = max(c_fzero, dot(N,H));

    //float shininess = specular.w;
    //float rs = (shininess+c_ftwo) * PI2 * pow(cosNH, shininess);

    //color.xyz = (color.xyz * cosNL * INV_PI + specular.xyz * rs ) * dlColor.xyz + ambient * INV_PI;
#endif

#if defined(PCOLOR)
    color.xyz *= v_color0;
#endif

#ifdef EMISSIVE
    color.xyz += emissive;
#endif

    gl_FragColor = color;
    //gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
}
