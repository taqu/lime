"precision highp float;\n"
"precision mediump int;\n"
"#define NUM_PALETTE_MATRICES 36\n"
"const int c_izero = 0;\n"
"const int c_ione = 1;\n"
"const int c_itwo = 2;\n"
"const int c_ithree = 3;\n"
"const float f_1_100 = 0.01;\n"
"uniform mat4 mwvp; //World * View * Projection Matrix\n"
"#if defined(VDIFFUSE) && defined(PCOLOR)\n"
"uniform vec3 dlDir;\n"
"uniform vec4 dlColor;\n"
"uniform vec3 ambient;\n"
"#endif\n"
"//--------------------------------\n"
"attribute vec3 a_pos0;\n"
"#ifdef VNORMAL\n"
"attribute vec4 a_normal0;\n"
"#endif\n"
"#ifdef VTEX0\n"
"attribute vec2 a_tex0;\n"
"#endif\n"
"#ifdef VBONE\n"
"attribute vec4 a_indices0;\n"
"#endif\n"
"//-------------------------------------\n"
"#ifdef PNORMAL\n"
"varying vec3 v_normal;\n"
"#endif\n"
"#ifdef PCOLOR\n"
"varying  vec3 v_color0;\n"
"#endif\n"
"#ifdef PTEX0\n"
"varying vec2 v_tex0;\n"
"#endif\n"
"#ifdef PPOS\n"
"varying vec3 v_pos0;\n"
"#endif\n"
"#ifdef SKINNING\n"
"uniform vec4 palette[NUM_PALETTE_MATRICES*3];\n"
"void skinning_position(inout vec4 ret, in vec4 position, float weight, int index)\n"
"{\n"
"    vec4 tmp;\n"
"    tmp.x = dot(position, palette[index      ]);\n"
"    tmp.y = dot(position, palette[index+c_ione]);\n"
"    tmp.z = dot(position, palette[index+c_itwo]);\n"
"    tmp.w = position.w;\n"
"    ret += weight * tmp;\n"
"}\n"
"void skinning_normal(inout vec3 ret, in vec3 normal, float weight, int index)\n"
"{\n"
"    vec3 tmp;\n"
"    tmp.x = dot(normal, palette[index      ].xyz);\n"
"    tmp.y = dot(normal, palette[index+c_ione].xyz);\n"
"    tmp.z = dot(normal, palette[index+c_itwo].xyz);\n"
"    ret += weight * tmp;\n"
"}\n"
"void skinning(in vec4 position, in vec3 normal, out vec4 retPosition, out vec3 retNormal)\n"
"{\n"
"    retPosition = vec4(float(c_izero));\n"
"    retNormal = vec3(float(c_izero));\n"
"    float weight = a_indices0.z * f_1_100;\n"
"    int index = int(a_indices0.x) * c_ithree;\n"
"    skinning_position(retPosition, position, weight, index);\n"
"    skinning_normal(retNormal, normal, weight, index);\n"
"    weight = float(c_ione) - weight;\n"
"    index = int(a_indices0.y) * c_ithree;\n"
"    skinning_position(retPosition, position, weight, index);\n"
"    skinning_normal(retNormal, normal, weight, index);\n"
"}\n"
"#endif\n"
"void main()\n"
"{\n"
"    vec4 position;\n"
"    vec3 normal;\n"
"#ifdef SKINNING\n"
"    skinning(vec4(a_pos0.xyz, float(c_ione)), a_normal0.xyz, position, normal);\n"
"#else\n"
"    position = vec4(a_pos0.xyz, float(c_ione));\n"
"#ifdef V_NORMAL\n"
"    normal = a_normal0.xyz;\n"
"#endif\n"
"#endif\n"
"    gl_Position = mwvp * position;\n"
"#ifdef PPOS\n"
"    v_pos0 = a_pos0.xyz;\n"
"#endif\n"
"#ifdef PNORMAL\n"
"    v_normal = normal;\n"
"#endif\n"
"#ifdef PTEX0\n"
"    v_tex0 = a_tex0;\n"
"#endif\n"
"#if defined(VDIFFUSE) && defined(PCOLOR)\n"
"    vec3 L = dlDir;\n"
"    v_color0 = ambient + dlColor.w * max(dlColor.xyz * dot(normal, L), float(c_izero));//Irradiance\n"
"#endif\n"
"}\n"
