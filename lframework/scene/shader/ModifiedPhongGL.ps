precision highp float;
precision mediump int;

#ifdef PNORMAL
varying vec3 v_normal;
#endif

#ifdef PCOLOR
varying  vec3 v_color0;
#endif

#ifdef PTEX0
varying vec2 v_tex0;
#endif

#ifdef PPOS
varying vec3 v_pos0;
#endif

const float PI = 3.14159265358979323846;
const float PI2 = 6.28318530717958647692;
const float INV_PI = 0.31830988618379067153;
const float INV_PI2 = 0.15915494309189533576;

#ifdef FRESNEL
const vec4 coeffFdr = vec4(-1.440, 0.710, 0.668, 0.0636);


uniform vec3 dlDir;
uniform vec3 camPos;
uniform vec4 specular;
#endif

uniform highp vec4 diffuse;

#if defined(PTEX0)
uniform sampler2D texAlbedo;
#endif

void main()
{
    //-------------
    highp vec4 color;

#if defined(PTEX0)
    color = texture2D(texAlbedo, v_tex0);
#else
    color = diffuse;
#endif

#if defined(FRESNEL)

    vec3 L = dlDir;
    vec3 N = normalize(v_normal);
    vec3 V = normalize(camPos - v_pos0);
    vec3 H = normalize(L+V);

    float cosNL = max(0.0, dot(N,L));
    float cosVH = max(0.0, dot(V,H));
    float cosNH = max(0.0, dot(N,H));

    float shininess = specular.w;
    vec3 ks = specular.xyz;

    vec3 reflectance = ks * (shininess + 2.0)*INV_PI2*pow(max(0.0001, cosNH), shininess);

    float ni = 1.5;
    //const float nt = 1.0;
    float F0 = (1.0 - ni)/(1.0 + ni);
    F0 = F0*F0;

    float Fr = F0 + (1.0 - F0)* pow(1.0 - cosNL, 5.0);

    reflectance *= Fr;

    vec3 Fdr = vec3(1.0, 1.0, 1.0) - reflectance;

    vec4 dcolor;
    dcolor.xyz = diffuse.xyz * Fdr * INV_PI;
    dcolor.w = diffuse.w;
    color *= dcolor;
    color.xyz += reflectance;

#else
#endif

#if defined(PCOLOR)
    color.xyz *= v_color0;
#endif
    gl_FragColor = color;
}
