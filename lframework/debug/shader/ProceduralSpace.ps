
cbuffer ProcedualConstant : register(b6)
{
    float2 resolution;
    float playbackTime;
    float reserved;
}

struct VSOutput
{
    float4 position : SV_POSITION;
    float2 tex : TEXCOORD0;
};

//Star Nest by Pablo RomAin Andrioli
// This content is under the MIT License.

#define iterations 17
#define formuparam 0.53

#define volsteps 20
#define stepsize 0.1

#define zoom   0.800
#define tile   0.850
#define speed  0.001

#define brightness 0.0015
#define darkmatter 0.300
#define distfading 0.730
#define saturation 0.850
#define gain 0.01

float4 main(VSOutput input) : SV_TARGET0
{
    float2 uv = input.tex - float2(0.5, 0.5);
    uv.y *= resolution.y/resolution.x;
    float3 dir = float3(uv*zoom, 1);
    float time = playbackTime*speed+0.25;
    
    float3 from = float3(1,0.5,0.5);
    from += float3(time*2,time,-2.0);

    float s=0.1;
    float fade=1.0;
    float3 v = (float3)0;
    for(int r=0; r<volsteps; ++r){
        float3 p=from + s*dir*0.5;
        float tile2 = tile*2.0;
        p = abs(float3(tile,tile,tile) - fmod(p, float3(tile2,tile2,tile2)));
        float pa = 0;
        float a = 0;
        for(int i=0; i<iterations; ++i){
            p = abs(p)/dot(p,p) - formuparam;
            a += abs(length(p)-pa);
            pa = length(p);
        }
        float dm = max(0, darkmatter-a*a*0.001);
        a *= a*a;
        if(6<r) fade*=1.0-dm;
        v += fade;
        v += float3(s,s*s,s*s*s*s)*a*brightness*fade;
        fade *=distfading;
        s += stepsize;
    }
    float l = length(v);
    v = pow(abs(lerp(float3(l,l,l), v, saturation)*gain), 1.8);
    return float4(v, 1);
}

#if 0
void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
	//get coords and direction
	vec2 uv=fragCoord.xy/iResolution.xy-.5;
	uv.y*=iResolution.y/iResolution.x;
	vec3 dir=vec3(uv*zoom,1.);
	float time=iGlobalTime*speed+.25;

	//mouse rotation
	float a1=.5+iMouse.x/iResolution.x*2.;
	float a2=.8+iMouse.y/iResolution.y*2.;
	mat2 rot1=mat2(cos(a1),sin(a1),-sin(a1),cos(a1));
	mat2 rot2=mat2(cos(a2),sin(a2),-sin(a2),cos(a2));
	dir.xz*=rot1;
	dir.xy*=rot2;
	vec3 from=vec3(1.,.5,0.5);
	from+=vec3(time*2.,time,-2.);
	from.xz*=rot1;
	from.xy*=rot2;
	
	//volumetric rendering
	float s=0.1,fade=1.;
	vec3 v=vec3(0.);
	for (int r=0; r<volsteps; r++) {
		vec3 p=from+s*dir*.5;
		p = abs(vec3(tile)-mod(p,vec3(tile*2.))); // tiling fold
		float pa,a=pa=0.;
		for (int i=0; i<iterations; i++) { 
			p=abs(p)/dot(p,p)-formuparam; // the magic formula
			a+=abs(length(p)-pa); // absolute sum of average change
			pa=length(p);
		}
		float dm=max(0.,darkmatter-a*a*.001); //dark matter
		a*=a*a; // add contrast
		if (r>6) fade*=1.-dm; // dark matter, don't render near
		//v+=vec3(dm,dm*.5,0.);
		v+=fade;
		v+=vec3(s,s*s,s*s*s*s)*a*brightness*fade; // coloring based on distance
		fade*=distfading; // distance fading
		s+=stepsize;
	}
	v=mix(vec3(length(v)),v,saturation); //color adjust
	fragColor = vec4(v*.01,1.);	
}
#endif
